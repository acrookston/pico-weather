from micropython import const
from ssd1306 import SSD1306
from framebuf import FrameBuffer, MONO_HLSB
import time

class FontWriter:
    def __init__(self, ssd1306):
        self.ssd1306 = ssd1306
    
    def icon(self, icon, x, y):
        fb = FrameBuffer(icon[2], icon[0], icon[1], MONO_HLSB)
        self.ssd1306.blit(fb, x, y)

    def write(self, string, fontSize, x, y):
        spacing = 1
        if fontSize == 12:
            spacing = SIZE_12["spacing"]
        elif fontSize == 20:
            spacing = SIZE_20["spacing"]

        for character in string:
            data = None
            if fontSize == 12:
                data = SIZE_12.get(character.encode('utf-8'))
            elif fontSize == 20:
                data = SIZE_20.get(character.encode('utf-8'))
            if data != None:
                size = data["size"]
                fb = FrameBuffer(data["bytes"], size[0], size[1], MONO_HLSB)
                self.ssd1306.blit(fb, x, y)
                x += size[0] + spacing
SIZE_20 = {
    "spacing": 4,
    ":".encode('utf-8'): {
        "size": (4, 20),
        "bytes": bytearray([
            0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 
            0x00, 0x00, 0x00, 0x00
            ])
        },
    ".".encode('utf-8'): {
        "size": (4, 20),
        "bytes": bytearray([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0xf0, 0xf0, 0xf0, 0xf0
            ])
        },        
    "°".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0x3e, 0x00, 0x3e, 0x00, 0xff, 0x80, 0xe3, 0x80, 0xe3, 0x80, 0xe3, 0x80, 0xff, 0x80, 0x3e, 0x00, 
            0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        },
    "0".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xf3, 0xf0, 0xf3, 0xf0, 0xfc, 0xf0, 0xfc, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0
            ])
        },
    "1".encode('utf-8'): {
        "size": (8, 20),
        "bytes": bytearray([
            0x0f, 0x0f, 0x3f, 0x3f, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
            0x0f, 0x0f, 0x0f, 0x0f
            ])
        },
    "2".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0xff, 0xc0, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x3f, 0xf0, 0x3f, 0xf0, 0xff, 0xc0, 0xff, 0xc0, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0
            ])
        },
    "3".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0xff, 0xc0, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x3f, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xc0, 0xff, 0xc0
            ])
        },
    "4".encode('utf-8'): {
        "size": (12,  20),
        "bytes": bytearray([
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xf0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0
            ])
        },
    "5".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 
            0xff, 0xc0, 0xff, 0xc0, 0x3f, 0xf0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xc0, 0xff, 0xc0
            ])
        },
    "6".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0x3f, 0xf0, 0x3f, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 
            0xff, 0xc0, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0
            ])
        },
    "7".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x03, 0xf0, 
            0x03, 0xc0, 0x03, 0xc0, 0x0f, 0xc0, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 
            0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00
            ])
        },
    "8".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0
            ])
        },
    "9".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xf0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0
            ])
        }
}

SIZE_12 = {
        "spacing": 2,
        ":".encode('utf-8'): {
            "size": (2, 12),
            "bytes": bytearray([0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00])
            },
        ".".encode('utf-8'): {
            "size": (2, 12),
            "bytes": bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0])
            },
        "%".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0x00, 0x00, 0x70, 0x52, 0x76, 0x0c, 0x18, 0x37, 0x25, 0x07, 0x00, 0x00])
            },
        "°".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0x78, 0xfc, 0xcc, 0xcc, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
            },
        "0".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0x7e, 0xff, 0xc3, 0xc3, 0xcf, 0xcf, 0xf3, 0xf3, 0xc3, 0xc3, 0xff, 0x7e])
            },
        "1".encode('utf-8'): {
            "size": (4, 12),
            "bytes": bytearray([0x30, 0x70, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30])
            },
        "2".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0xfe, 0xff, 0x03, 0x03, 0x03, 0x7f, 0xfe, 0xc0, 0xc0, 0xc0, 0xff, 0xff])
            },
        "3".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0xfe, 0xff, 0x03, 0x03, 0x03, 0x3e, 0x3e, 0x03, 0x03, 0x03, 0xff, 0xfe])
            },
        "4".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0x7f, 0x03, 0x03, 0x03, 0x03, 0x03])
            },
        "5".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xfe, 0x7f, 0x03, 0x03, 0x03, 0xff, 0xfe])
            },
        "6".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0x7f, 0xff, 0xc0, 0xc0, 0xc0, 0xfe, 0xff, 0xc3, 0xc3, 0xc3, 0xff, 0x7e])
            },
        "7".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0xff, 0xff, 0x03, 0x03, 0x0f, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18])
            },
        "8".encode('utf-8'): {
            "size": (7, 12),
            "bytes": bytearray([0x7c, 0xfe, 0xc6, 0xc6, 0xc6, 0x7c, 0x7c, 0xc6, 0xc6, 0xc6, 0xfe, 0x7c])
            },
        "9".encode('utf-8'): {
            "size": (7, 12),
            "bytes": bytearray([0x7c, 0xfe, 0xc6, 0xc6, 0xc6, 0xfe, 0x7e, 0x06, 0x06, 0x06, 0x06, 0x06])
            },
        "C".encode('utf-8'): {
            "size": (8, 12),
            "bytes": bytearray([0x7e, 0xff, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc3, 0xff, 0x7e])
            }
}

class Icons:
    COMMUNICATION_OK = (9, 7, bytearray([0x22, 0x00, 0x72, 0x00, 0xfa, 0x00, 0x22, 0x00, 0x2f, 0x80, 0x27, 0x00, 0x22, 0x00]))
    ERROR = (7, 7, bytearray([0x38, 0x7c, 0xd6, 0xee, 0xd6, 0x7c, 0x38]))
