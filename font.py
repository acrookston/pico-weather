from framebuf import FrameBuffer, MONO_HLSB
from config import Config

class Orientation:
    LANDSCAPE=0
    PORTRAIT=1

class FontWriter:
    def __init__(self, ssd1306, orientation=Orientation.LANDSCAPE):
        self.ssd1306 = ssd1306
        self.orientation = orientation
    
    def icon(self, icon, x, y):
        fb = FrameBuffer(icon[2], icon[0], icon[1], MONO_HLSB)
        self.ssd1306.blit(fb, x, y)

    def write(self, string, fontSize, x, y):
        spacing = 1
        adjustedX = x
        adjustedY = y
        if self.orientation is Orientation.LANDSCAPE:
            # TODO: Confirm landscape is still working
            if fontSize == 12:
                spacing = SIZE_12_SPACING
            elif fontSize == 20:
                spacing = SIZE_20_SPACING
        else:
            adjustedY = x
            adjustedX = Config.DISPLAY_WIDTH - y - fontSize
            spacing = SIZE_20_P_SPACING

        for character in string:
            data = self.getCharacter(character, fontSize)
            if data is not None:
                # print("X", character, x, data[0], data[1], adjustedX, adjustedY)
                fb = FrameBuffer(data[2], data[0], data[1], MONO_HLSB)
                self.ssd1306.blit(fb, adjustedX, adjustedY)
                if self.orientation is Orientation.LANDSCAPE:
                    adjustedX += data[0] + spacing
                else:
                    adjustedY += data[1] + spacing

    def getCharacter(self, character, fontSize):
        if self.orientation is Orientation.LANDSCAPE:
            if fontSize == 12:
                data = SIZE_12.get(character.encode('utf-8'))
            elif fontSize == 20:
                return SIZE_20.get(character.encode('utf-8'))
        else:
            return SIZE_20_P.get(character.encode('utf-8'))
        return None


SIZE_20_P_SPACING = 3
SIZE_20_P = {
        "1".encode('utf-8'): (20, 8, bytearray([0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xc0, 0xff, 0xff, 0xf0, 0xff,
            0xff, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0])),
        "2".encode('utf-8'): (20, 12, bytearray([0xff, 0xc0, 0xf0, 0xff, 0xc0, 0xf0, 0xff, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0x3f,
            0xc0, 0xf0, 0x3f, 0xc0])),
        "3".encode('utf-8'): (20, 12, bytearray([0xf0, 0x00, 0xf0, 0xf0, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x3f, 0x9f,
            0xc0, 0x3f, 0x9f, 0xc0])),
        "4".encode('utf-8'): (20, 12, bytearray([0x00, 0x3f, 0xf0, 0x00, 0x3f, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0x00,
            0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff,
            0xf0, 0xff, 0xff, 0xf0])),
        '5'.encode('utf-8'): (20, 12, bytearray([0xf0, 0x3f, 0xf0, 0xf0, 0x3f, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0x3f, 0xc0,
            0xf0, 0x3f, 0xc0, 0xf0])),
        "6".encode('utf-8'): (20, 12, bytearray([0x3f, 0xff, 0xc0, 0x3f, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0x3f, 0xc0,
            0xf0, 0x3f, 0xc0, 0xf0])),
        "7".encode('utf-8'): (20, 12, bytearray([0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0xff, 0xc0, 0xf0, 0xff,
            0xc0, 0xf0, 0xff, 0xf8, 0xf0, 0xff, 0xf8, 0xf0, 0x00, 0x7f, 0xf0, 0x00, 0x7f, 0xf0, 0x00, 0x0f,
            0xf0, 0x00, 0x0f, 0xf0])),
        '8'.encode('utf-8'): (20, 12, bytearray([0x3f, 0x9f, 0xc0, 0x3f, 0x9f, 0xc0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x3f, 0x9f,
            0xc0, 0x3f, 0x9f, 0xc0])),
        '9'.encode('utf-8'): (20, 12, bytearray([0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0xff, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0xf0, 0xf0, 0x00,
            0xf0, 0xf0, 0x00, 0xf0, 0xf0, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff,
            0xc0, 0xff, 0xff, 0xc0])),
        '0'.encode('utf-8'): (20, 12, bytearray([0x3f, 0xff, 0xc0, 0x3f, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xf0, 0xc0, 0xf0, 0xf0,
            0xc0, 0xf0, 0xf0, 0x30, 0xf0, 0xf0, 0x30, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x3f, 0xff,
            0xc0, 0x3f, 0xff, 0xc0])),
        ":".encode('utf-8'): (20, 4, bytearray([0x0f, 0x0f, 0x00, 0x0f, 0x0f, 0x00, 0x0f, 0x0f, 0x00, 0x0f, 0x0f, 0x00])),
        ".".encode('utf-8'): (20, 4, bytearray([0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x00])),
        '/'.encode('utf-8'): (20, 6, bytearray([0x01, 0xc0, 0x00, 0x01, 0xc0, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00,
            0x38, 0x00])),
        '%'.encode('utf-8'): (12, 11, bytearray([0x00, 0xe0, 0x01, 0xf0, 0x31, 0xb0, 0x19, 0xf0, 0x0c, 0xe0, 0x06, 0x00, 0x73, 0x00, 0xf9, 0x80,
            0xd8, 0xc0, 0xf8, 0x00, 0x70, 0x00])),
        '°'.encode('utf-8'): (20, 10, bytearray([0x00, 0x78, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0x00, 0x00, 0xfc, 0x00, 0x7c,
            0x78, 0x00, 0xfe, 0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0x00, 0x00])),
}

SIZE_20_SPACING = 4
SIZE_20 = {
    ":".encode('utf-8'): (4, 20, bytearray([
            0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 
            0x00, 0x00, 0x00, 0x00])
        ),
    ".".encode('utf-8'): (4, 20,  bytearray([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0xf0, 0xf0, 0xf0, 0xf0
            ])
        ),
    "°".encode('utf-8'): (12, 20, bytearray([
            0x3e, 0x00, 0x3e, 0x00, 0xff, 0x80, 0xe3, 0x80, 0xe3, 0x80, 0xe3, 0x80, 0xff, 0x80, 0x3e, 0x00, 
            0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        ),
    "0".encode('utf-8'): {
        "size": (12, 20),
        "bytes": bytearray([
            0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xf3, 0xf0, 0xf3, 0xf0, 0xfc, 0xf0, 0xfc, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0
            ])
        },
    "1".encode('utf-8'): (8, 20, bytearray([
            0x0f, 0x0f, 0x3f, 0x3f, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
            0x0f, 0x0f, 0x0f, 0x0f
            ])
        ),
    "2".encode('utf-8'): (12, 20, bytearray([
            0xff, 0xc0, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x3f, 0xf0, 0x3f, 0xf0, 0xff, 0xc0, 0xff, 0xc0, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0
            ])
        ),
    "3".encode('utf-8'): (12, 20, bytearray([
            0xff, 0xc0, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x3f, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xc0, 0xff, 0xc0
            ])
        ),
    "4".encode('utf-8'): (12,  20, bytearray([
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xf0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0
            ])
        ),
    "5".encode('utf-8'): (12, 20, bytearray([
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 
            0xff, 0xc0, 0xff, 0xc0, 0x3f, 0xf0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xc0, 0xff, 0xc0
            ])
        ),
    "6".encode('utf-8'): (12, 20, bytearray([
            0x3f, 0xf0, 0x3f, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 
            0xff, 0xc0, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0
            ])
        ),
    "7".encode('utf-8'): (12, 20, bytearray([
            0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x03, 0xf0, 
            0x03, 0xc0, 0x03, 0xc0, 0x0f, 0xc0, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 
            0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00
            ])
        ),
    "8".encode('utf-8'): (12, 20, bytearray([
            0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xc0, 0x3f, 0xc0
            ])
        ),
    "9".encode('utf-8'): (12, 20, bytearray([
            0x3f, 0xc0, 0x3f, 0xc0, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
            0xff, 0xf0, 0xff, 0xf0, 0x3f, 0xf0, 0x3f, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 
            0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0
            ])
        )
}

SIZE_12_SPACING = 2
SIZE_12 = {
        ":".encode('utf-8'): (2, 12, bytearray([0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00])),
        ".".encode('utf-8'): (2, 12, bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0])),
        "%".encode('utf-8'): (8, 12, bytearray([0x00, 0x00, 0x70, 0x52, 0x76, 0x0c, 0x18, 0x37, 0x25, 0x07, 0x00, 0x00])),
        "°".encode('utf-8'): (8, 12, bytearray([0x78, 0xfc, 0xcc, 0xcc, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])),
        "0".encode('utf-8'): (8, 12, bytearray([0x7e, 0xff, 0xc3, 0xc3, 0xcf, 0xcf, 0xf3, 0xf3, 0xc3, 0xc3, 0xff, 0x7e])),
        "1".encode('utf-8'): (4, 12, bytearray([0x30, 0x70, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30])),
        "2".encode('utf-8'): (8, 12, bytearray([0xfe, 0xff, 0x03, 0x03, 0x03, 0x7f, 0xfe, 0xc0, 0xc0, 0xc0, 0xff, 0xff])),
        "3".encode('utf-8'): (8, 12, bytearray([0xfe, 0xff, 0x03, 0x03, 0x03, 0x3e, 0x3e, 0x03, 0x03, 0x03, 0xff, 0xfe])),
        "4".encode('utf-8'): (8, 12, bytearray([0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0x7f, 0x03, 0x03, 0x03, 0x03, 0x03])),
        "5".encode('utf-8'): (8, 12, bytearray([0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xfe, 0x7f, 0x03, 0x03, 0x03, 0xff, 0xfe])),
        "6".encode('utf-8'): (8, 12, bytearray([0x7f, 0xff, 0xc0, 0xc0, 0xc0, 0xfe, 0xff, 0xc3, 0xc3, 0xc3, 0xff, 0x7e])),
        "7".encode('utf-8'): (8, 12, bytearray([0xff, 0xff, 0x03, 0x03, 0x0f, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18])),
        "8".encode('utf-8'): (7, 12, bytearray([0x7c, 0xfe, 0xc6, 0xc6, 0xc6, 0x7c, 0x7c, 0xc6, 0xc6, 0xc6, 0xfe, 0x7c])),
        "9".encode('utf-8'): (7, 12, bytearray([0x7c, 0xfe, 0xc6, 0xc6, 0xc6, 0xfe, 0x7e, 0x06, 0x06, 0x06, 0x06, 0x06])),
        "C".encode('utf-8'): (8, 12, bytearray([0x7e, 0xff, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc3, 0xff, 0x7e]))
}

class Icons:
    COMMUNICATION_OK = (9, 7, bytearray([0x22, 0x00, 0x72, 0x00, 0xfa, 0x00, 0x22, 0x00, 0x2f, 0x80, 0x27, 0x00, 0x22, 0x00]))
    ERROR = (7, 7, bytearray([0x38, 0x7c, 0xd6, 0xee, 0xd6, 0x7c, 0x38]))
